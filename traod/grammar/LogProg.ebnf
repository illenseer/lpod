(* Slightly modified ASP-Core 2 Grammar *)

@@comments :: /%\*([^*]|\*[^%])*\*%/
@@eol_comments :: /%([^*\n][^\n]*)?\n/

program
    =
    statements:{statement}+ $
    ;


directive
    =
    '@@' ~
    (
          name:('comments' | 'eol_comments' | 'whitespace') '::' ~ value:regex
        | name:('nameguard' | 'ignorecase') '::' ~ value:boolean
    )
    ;


statement
    =
        cons
        [body:body]
        dot
    |
        head:head
        [cons [body:body]]
        dot
    |
        wcons
        [body:body]
        dot
        square_open
        weight_at_level:weight_at_level
        square_close
    |
        optimize:optimize dot
    ;


head
    =
      disjunction:(classical_literal {or classical_literal}+)
    | ordered_disjunction:(classical_literal {oor classical_literal}+)
    | choice:choice
    | aggregate:aggregate
    | atom:classical_literal
    ;


body
    =
    (naf_literal | [naf] aggregate) {comma (naf_literal | [naf] aggregate)}
    ;


choice
    =
    [term [binop]]
    curly_open
    [choice_element {semicolon choice_element}]
    curly_close
    [[binop] term]
    ;


choice_element
    =
    classical_literal [colon [naf_literals]]
    ;


aggregate
    =
    [term [binop]]
    [aggregate_function]
    curly_open
    [aggregate_element {semicolon aggregate_element}]
    curly_close
    [[binop] term]
    ;


aggregate_element
    =
    [terms] [colon [naf_literals [colon [naf_literals]]]]
    ;


aggregate_function
    =
      aggregate_count
    | aggregate_max
    | aggregate_min
    | aggregate_sumplus
    | aggregate_sum
    ;


optimize
    =
    optimize_function
    curly_open
    [optimize_element {semicolon optimize_element}]
    curly_close
    ;


optimize_element
    =
    weight_at_level [colon [naf_literals]]
    ;


optimize_function
    =
    maximize | minimize
    ;


weight_at_level
    =
    term [at term] [comma terms]
    ;


naf_literals
    =
    naf_literal {comma naf_literal}
    ;


naf_literal
    =
    [naf] classical_literal | builtin_atom
    ;


classical_literal
    =
    [minus] id [paren_open [terms] paren_close]
    ;


builtin_atom
    =
    term binop term
    ;


binop
    =
    equal | unequal | less_or_eq | greater_or_eq | less | greater
    ;


terms
    =
    term {comma term}
    ;


term
    =
      id [paren_open [terms] paren_close]
    | number dot dot number
    | number
    | string
    | variable
    | anonymous_variable
    | paren_open term paren_close
    | minus term
    | term arithop term
    ;


arithop
    =
    plus | minus | times | div
    ;


id
    =
    /[a-z_][A-Za-z0-9_]*/
    ;


variable
    =
    /[A-Z][A-Za-z0-9_]*/
    ;


symbolic_constant
    =
    /[a-z][A-Za-z0-9_]*/
    ;


string
    =
    /"(?:\\.|[^|*\\()])+"/
    ;


number
    =
    /(0|[1-9][0-9]*)/
    ;


anonymous_variable
    =
    '_'
    ;


dot
    =
    '.'
    ;


comma
    =
    ','
    ;


query_mark
    =
    '?'
    ;


colon
    =
    ':'
    ;


semicolon
    =
    ';'
    ;


or
    =
    '|' | ';'
    ;


oor
    =
    ';;' | '||'
    ;


naf
    =
    'not '
    ;


cons
    =
    ':-'
    ;


wcons
    =
    ':~'
    ;


plus
    =
    '+'
    ;


minus
    =
    '-'
    ;


times
    =
    '*'
    ;


div
    =
    '/'
    ;


at
    =
    '@'
    ;


paren_open
    =
    '('
    ;


paren_close
    =
    ')'
    ;


square_open
    =
    '['
    ;


square_close
    =
    ']'
    ;


curly_open
    =
    '{'
    ;


curly_close
    =
    '}'
    ;


equal
    =
    '='
    ;


unequal
    =
    '<>' | '!='
    ;


less
    =
    '<'
    ;


greater
    =
    '>'
    ;


less_or_eq
    =
    '<='
    ;


greater_or_eq
    =
    '>='
    ;


aggregate_count
    =
    '#count'
    ;


aggregate_max
    =
    '#max'
    ;


aggregate_min
    =
    '#min'
    ;


aggregate_sumplus
    =
    '#sum+'
    ;


aggregate_sum
    =
    '#sum'
    ;


minimize
    =
    '#minimize' | '#minimise'
    ;


maximize
    =
    '#maximize' | '#maximise'
    ;


regex
    =
      '?/' ~ @:?/(.|\n)+?(?=/\?)/?? ?//\?+/?? ~
    | '/' ~ @:?/(.|\n)+?(?=/)/? '/' ~
    ;


boolean
    =
    'True' | 'False'
    ;
